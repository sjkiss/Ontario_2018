filter(Variable=="Social_Use2")
WAP_models %>%
select(Variable, model6) %>%
filter(Variable=="Social_Use2") %>%
slice(1)
plot_predictions(WAP_models$`model6`[[1]],
condition=list("Interest",
Social_Use2=c("ScoreNever", "ScoreAbout once a day", "ScoreSeveral times a day")))
WAP_models %>%
select(Variable, model6) %>%
filter(Variable=="Social_Use2") %>%
slice(1) %>%
plot_predictions(.`model6`,
WAP_models %>%
select(Variable, model6) %>%
filter(Variable=="Social_Use2") %>%
slice(1)
WAP_models %>%
select(Variable, model6) %>%
filter(Variable=="Social_Use2") %>%
slice(1) %>%
plot_predictions(.$model6,
condition=list("Interest",
Social_Use2=c("ScoreNever", "ScoreAbout once a day", "ScoreSeveral times a day")))
library(marginaleffects)
WAP_models %>%
select(Variable, model6) %>%
filter(Variable=="Social_Use2") %>%
slice(1) %>%
plot_predictions(.$model6,
condition=list("Interest",
Social_Use2=c("ScoreNever", "ScoreAbout once a day", "ScoreSeveral times a day")))
WAP_models %>%
select(Variable, model6) %>%
filter(Variable=="Social_Use2") %>%
slice(1)
WAP_models %>%
filter(Variable=="Social_Use2") %>%
select(model6) %>%
slice(1) %>% unlist()
WAP_models %>%
filter(Variable=="Social_Use2") %>%
select(model6) %>%
slice(1) %>% class()
WAP_models %>%
filter(Variable=="Social_Use2") %>%
select(model6) %>%
slice(1) %>%
plot_predictions(.,
condition=list("Interest",
Social_Use2=c("ScoreNever", "ScoreAbout once a day", "ScoreSeveral times a day")))
plot_predictions(WAP_models$model6[[1]],
condition=list("Interest",
Social_Use2=c("ScoreNever", "ScoreAbout once a day", "ScoreSeveral times a day")))
WAP_models$model6[[1]]
plot_predictions(WAP_models$model6[[1]],
condition=list("Interest",
Social_Use2=c("ScoreNever", "ScoreAbout once a day", "ScoreSeveral times a day")))
plot_predictions(WAP_models$model6[[1]],
condition=list("Interest",
Score=c("Never", "About once a day", "Several times a day")))
plot_predictions(WAP_models$model6[[1]],
condition=list("Interest",
Score=c("ScoreNever", "ScoreAbout once a day", "ScoreSeveral times a day")))
model6_pm <- lm(WAP_sd ~ Primary_media*Interest+ media_diversity+age3 + gender+degree + income3 + pol_knowledge, data = on18, na.action = na.omit)
summary(WAP_Interact)
model6_pm <- lm(WAP_sd ~ Primary_media*Interest+ media_diversity+age3 + gender+degree + income3 + pol_knowledge, data = on18, na.action = na.omit)
summary(model6_pm)
model6_su <- lm(WAP_sd ~ Social_Use2*Interest  + media_diversity+age3 + gender+degree + income3 + pol_knowledge, data = on18, na.action = na.omit)
summary(model6_su)
summary(model6_su)
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day")))
?plot_predictions
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day")))+labs(y="WAP")
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day")))+labs(y="WAP")+theme(legend.position="bottom")+aes(linetype=Social_Use2)
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day")))+labs(y="WAP")+theme(legend.position="bottom")+aes(linetype=Social_Use2, col=Social_Use2)+scale_color_grey()
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day")))+labs(y="WAP")+theme(legend.position="bottom")+aes(linetype=Social_Use2, col=Social_Use2)+stat_smooth(se=F)
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day"), se=F))+labs(y="WAP")+theme(legend.position="bottom")+aes(linetype=Social_Use2, col=Social_Use2)
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day")), se=F)+labs(y="WAP")+theme(legend.position="bottom")+aes(linetype=Social_Use2, col=Social_Use2)
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day")))+labs(y="WAP")+theme(legend.position="bottom")+aes(linetype=Social_Use2, col=Social_Use2, se=F)
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day")))+labs(y="WAP")+theme(legend.position="bottom")+aes(linetype=Social_Use2, col=Social_Use2)+geom_ribbon(se=F)
?plot_predictions
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day")), vcov=F)+labs(y="WAP")+theme(legend.position="bottom")+aes(linetype=Social_Use2, col=Social_Use2)
install.packages("rbbt")
remotes::install_github("paleolimbot/rbbt")
install.packages('sandwich')
#load libraries
library(tidyverse)
#| label: setup
#| echo: false
library(knitr)
opts_knit$set(root.dir=rprojroot::find_rstudio_root_file())
#opts_chunk$set(warning=F,message=F)
on18 %>%
group_by(Social_Use2) %>%
summarize(Bimodality=bimodality_coefficient(policy_polarization)) %>%
filter(!is.na(Social_Use2)) %>%
arrange(., desc(Bimodality)) %>%
gt()
#| label: setup
#| echo: false
library(knitr)
opts_knit$set(root.dir=rprojroot::find_rstudio_root_file())
#opts_chunk$set(warning=F,message=F)
#| label: import
#| echo: false
#| warning: false
#| message: false
#| results: 'hide'
#| output: false
library(here)
source(here("Code/3_polarization.R"))
source(here("Code/3a_bimodality_coefficients.R"))
#Cache needs to be turned off the render
#| label: overlapping
#| echo: false
#| warning: false
#| message: false
#| results: 'hide'
#| output: false
#| cache: true
source(here("Code/3a_overlapping.R"))
#| label: set-theme
theme_set(theme_bw())
#| label: tbl-vote-choice
#| tbl-cap: Vote intention of all respondents.
data.frame(Party=c("Liberal Party of Ontario", "Progressive Conservative Party of Ontario",
"New Democratic Party of Ontario",
"Green Party of Ontario"), Vote=c(0.196, 0.405, 0.336, 0.046), Sample=rep("Election", 4))->vote_shares
library(gtsummary)
on18 %>%
as_factor() %>%
#filter(partyvote2018!="Undecided") %>%
group_by(partyvote2018) %>%
summarize(n=n()) %>%
mutate(Vote=(n/sum(n)), Sample=rep("OPES", nrow(.))) %>%
select(-n, Party=partyvote2018) %>%
bind_rows(., vote_shares) %>%
mutate(Vote=scales::percent(Vote, accuracy=1)) %>%
pivot_wider(., names_from="Sample", values_from="Vote") %>%
kable()
#| label: calculate-spearman
#install.packages("pspearman")
spear1<-pspearman::spearman.test(as.ordered(on18$Social_Use2),as.ordered(on18$Primary_media))
#spear1$estimate
#| label: tbl-cross
#| tbl-cap: "Cross-tabulation of primary source of election news by frequency of general social media usage. Spearman's Rho correlation coefficient is 0.24"
#| eval: true
on18 %>%
tbl_cross(Social_Use2, Primary_media, percent="column")
#| echo: false
#| warning: false
#| fig-cap: Theoretical distibutions representing various levels of bimodality
#| label: fig-sim_bimod
ggarrange(uni_modal, semi_modal, bimodal, nrow = 1)
#| label: tbl-descript
#| tbl-cap: Summary of weighted affective polarization by media use
#| echo: false
#| message: false
library(gtsummary)
on18 %>%
select(WAP, Primary_media, Social_Use2, Vote) %>%
#filter(!is.na(Vote)) %>%
tbl_continuous(variable=c(WAP),
statistic=list(~"{mean} ({sd})"))
#| echo: false
#| warning: false
#| fig-cap: OLS Regression Models for Weighted Affective Polarization Scores by Media Consumption of Campaign News and Control Variables
#| label: fig-PM-models
WAP_models %>%
filter(Variable=="Primary_media") %>%
#Filter out the interaction model
filter(Model_Name!="Model 6") %>%
filter(str_detect(term, "Intercept", negate=T))  %>%
ggplot(., aes(x=estimate, y=fct_relevel(term, "Social_Media", "Online", "Mixed", after=7)))+facet_wrap(~Model_Name)+
geom_pointrange(aes(xmin=estimate-(1.96*std.error), xmax=estimate+(1.96*std.error)))+geom_vline(xintercept=0, linetype=2, col="red")+labs(y="Variable", x="Coefficient")
#| echo: false
#| warning: false
#| fig-cap: OLS regression models coefficients for weighted affective polarization scores by social media usage and control variables. "Never" using social media is the reference category for self-reported social media usage.
#| label: fig-SU-models
WAP_models %>%
filter(Variable=="Social_Use2") %>%
filter(Model_Name!="Model 6") %>%
filter(str_detect(term, "Intercept", negate=T)) %>%
ggplot(., aes(x=estimate, y=fct_relevel(term, "Never", "Less than once a week","About once a week","Several times a week", "About once a day","Several times a day", after=7)))+facet_wrap(~Model_Name)+
geom_pointrange(aes(xmin=estimate-(1.96*std.error), xmax=estimate+(1.96*std.error)))+geom_vline(xintercept=0, linetype=2, col="red")+labs(y="Variable", x="Coefficient")
#| label: fig-interactions
#| fig-cap: Predicted values of affective polarization by selected levels of social media use and interest in politics.
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day")), vcov=F)+labs(y="Predicted WAP")+theme(legend.position="bottom")+aes(linetype=Social_Use2, col=Social_Use2)
#| echo: false
#| warning: false
#| fig-cap: Predicted Levels of Affective Polarization by Age
#| label: fig-pred_age
age_predicted_graph
#| label: tbl-descript-policy
#| tbl-cap: Summary of ideology by media consumption and vote choice.
#| echo: false
#| message: false
library(gtsummary)
on18 %>%
select(policy_polarization, Primary_media, Social_Use2, Vote) %>%
#filter(!is.na(Vote)) %>%
tbl_continuous(variable=c(policy_polarization),
statistic=list(~"{mean} ({sd})"))
#| label: tbl-bimodality-media-policy
#| echo: false
library(gt)
on18 %>%
group_by(Primary_media) %>%
summarize(Bimodality=bimodality_coefficient(policy_polarization)) %>%
arrange(., desc(Bimodality)) %>%
gt()
#| echo: false
#| warning: false
#| label: fig-BC-PM
#| fig-cap: Probability distributions of policy positions by primary media source
#|
gridExtra::grid.arrange(bimod_legacy, bimod_online, bimod_social, bimod_mixed)
#| label: tbl-primary-media-interest-bimodality
#| tbl-cap: Policy polarization bimodality coefficients by media consumption and political interest.
on18 %>%
group_by(Primary_media, Interest_cat) %>%
filter(!is.na(Interest_cat)) %>%
summarize(Bimodality=bimodality_coefficient(policy_polarization)) %>%
rename(Interest=Interest_cat) %>%
gt()
on18 %>%
group_by(Social_Use2) %>%
summarize(Bimodality=bimodality_coefficient(policy_polarization)) %>%
filter(!is.na(Social_Use2)) %>%
arrange(., desc(Bimodality)) %>%
gt()
on18 %>%
group_by(Social_Use2) %>%
summarize(Bimodality=bimodality_coefficient(policy_polarization)) %>%
filter(!is.na(Social_Use2)) %>%
arrange(., desc(Bimodality)) %>%
gt() %>%
fmt_decimal(., digits=2)
on18 %>%
group_by(Primary_media) %>%
summarize(Bimodality=bimodality_coefficient(policy_polarization)) %>%
arrange(., desc(Bimodality)) %>%
gt() %>%
fmt_number(., columns=2, decimals=2)
#| label: setup
#| echo: false
library(knitr)
opts_knit$set(root.dir=rprojroot::find_rstudio_root_file())
#opts_chunk$set(warning=F,message=F)
on18 %>%
group_by(Social_Use2) %>%
summarize(Bimodality=bimodality_coefficient(policy_polarization)) %>%
filter(!is.na(Social_Use2)) %>%
arrange(., desc(Bimodality)) %>%
gt() %>%
fmt_number(., columns=2, decimals=2)
#| label: setup
#| echo: false
library(knitr)
opts_knit$set(root.dir=rprojroot::find_rstudio_root_file())
#opts_chunk$set(warning=F,message=F)
on18 %>%
group_by(Social_Use2) %>%
summarize(Bimodality=bimodality_coefficient(policy_polarization)) %>%
filter(!is.na(Social_Use2)) %>%
arrange(., desc(Bimodality)) %>%
gt() %>%
fmt_number(., columns=2, decimals=2)
#| label: setup
#| echo: false
library(knitr)
opts_knit$set(root.dir=rprojroot::find_rstudio_root_file())
#opts_chunk$set(warning=F,message=F)
#| label: import
#| echo: false
#| warning: false
#| message: false
#| results: 'hide'
#| output: false
library(here)
source(here("Code/3_polarization.R"))
source(here("Code/3a_bimodality_coefficients.R"))
#Cache needs to be turned off the render
#| label: overlapping
#| echo: false
#| warning: false
#| message: false
#| results: 'hide'
#| output: false
#| cache: true
source(here("Code/3a_overlapping.R"))
#| label: set-theme
theme_set(theme_bw())
#| label: tbl-vote-choice
#| tbl-cap: Vote intention of all respondents.
data.frame(Party=c("Liberal Party of Ontario", "Progressive Conservative Party of Ontario",
"New Democratic Party of Ontario",
"Green Party of Ontario"), Vote=c(0.196, 0.405, 0.336, 0.046), Sample=rep("Election", 4))->vote_shares
library(gtsummary)
on18 %>%
as_factor() %>%
#filter(partyvote2018!="Undecided") %>%
group_by(partyvote2018) %>%
summarize(n=n()) %>%
mutate(Vote=(n/sum(n)), Sample=rep("OPES", nrow(.))) %>%
select(-n, Party=partyvote2018) %>%
bind_rows(., vote_shares) %>%
mutate(Vote=scales::percent(Vote, accuracy=1)) %>%
pivot_wider(., names_from="Sample", values_from="Vote") %>%
kable()
#| label: calculate-spearman
#install.packages("pspearman")
spear1<-pspearman::spearman.test(as.ordered(on18$Social_Use2),as.ordered(on18$Primary_media))
#spear1$estimate
#| label: tbl-cross
#| tbl-cap: "Cross-tabulation of primary source of election news by frequency of general social media usage. Spearman's Rho correlation coefficient is 0.24"
#| eval: true
on18 %>%
tbl_cross(Social_Use2, Primary_media, percent="column")
#| echo: false
#| warning: false
#| fig-cap: Theoretical distibutions representing various levels of bimodality
#| label: fig-sim_bimod
ggarrange(uni_modal, semi_modal, bimodal, nrow = 1)
#| label: tbl-descript
#| tbl-cap: Summary of weighted affective polarization by media use
#| echo: false
#| message: false
library(gtsummary)
on18 %>%
select(WAP, Primary_media, Social_Use2, Vote) %>%
#filter(!is.na(Vote)) %>%
tbl_continuous(variable=c(WAP),
statistic=list(~"{mean} ({sd})"))
#| echo: false
#| warning: false
#| fig-cap: OLS Regression Models for Weighted Affective Polarization Scores by Media Consumption of Campaign News and Control Variables
#| label: fig-PM-models
WAP_models %>%
filter(Variable=="Primary_media") %>%
#Filter out the interaction model
filter(Model_Name!="Model 6") %>%
filter(str_detect(term, "Intercept", negate=T))  %>%
ggplot(., aes(x=estimate, y=fct_relevel(term, "Social_Media", "Online", "Mixed", after=7)))+facet_wrap(~Model_Name)+
geom_pointrange(aes(xmin=estimate-(1.96*std.error), xmax=estimate+(1.96*std.error)))+geom_vline(xintercept=0, linetype=2, col="red")+labs(y="Variable", x="Coefficient")
#| echo: false
#| warning: false
#| fig-cap: OLS regression models coefficients for weighted affective polarization scores by social media usage and control variables. "Never" using social media is the reference category for self-reported social media usage.
#| label: fig-SU-models
WAP_models %>%
filter(Variable=="Social_Use2") %>%
filter(Model_Name!="Model 6") %>%
filter(str_detect(term, "Intercept", negate=T)) %>%
ggplot(., aes(x=estimate, y=fct_relevel(term, "Never", "Less than once a week","About once a week","Several times a week", "About once a day","Several times a day", after=7)))+facet_wrap(~Model_Name)+
geom_pointrange(aes(xmin=estimate-(1.96*std.error), xmax=estimate+(1.96*std.error)))+geom_vline(xintercept=0, linetype=2, col="red")+labs(y="Variable", x="Coefficient")
#| label: fig-interactions
#| fig-cap: Predicted values of affective polarization by selected levels of social media use and interest in politics.
plot_predictions(model6_su,
condition=list("Interest", Social_Use2=c("Never", "About once a day", "Several times a day")), vcov=F)+labs(y="Predicted WAP")+theme(legend.position="bottom")+aes(linetype=Social_Use2, col=Social_Use2)
#| echo: false
#| warning: false
#| fig-cap: Predicted Levels of Affective Polarization by Age
#| label: fig-pred_age
age_predicted_graph
#| label: tbl-descript-policy
#| tbl-cap: Summary of ideology by media consumption and vote choice.
#| echo: false
#| message: false
library(gtsummary)
on18 %>%
select(policy_polarization, Primary_media, Social_Use2, Vote) %>%
#filter(!is.na(Vote)) %>%
tbl_continuous(variable=c(policy_polarization),
statistic=list(~"{mean} ({sd})"))
#| label: tbl-bimodality-media-policy
#| echo: false
library(gt)
on18 %>%
group_by(Primary_media) %>%
summarize(Bimodality=bimodality_coefficient(policy_polarization)) %>%
arrange(., desc(Bimodality)) %>%
gt() %>%
fmt_number(., columns=2, decimals=2)
#| echo: false
#| warning: false
#| label: fig-BC-PM
#| fig-cap: Probability distributions of policy positions by primary media source
#|
gridExtra::grid.arrange(bimod_legacy, bimod_online, bimod_social, bimod_mixed)
#| label: tbl-primary-media-interest-bimodality
#| tbl-cap: Policy polarization bimodality coefficients by media consumption and political interest.
on18 %>%
group_by(Primary_media, Interest_cat) %>%
filter(!is.na(Interest_cat)) %>%
summarize(Bimodality=bimodality_coefficient(policy_polarization)) %>%
rename(Interest=Interest_cat) %>%
gt()%>%
fmt_number(., columns=2, decimals=2)
#| label: tbl-bimodality-social-media-policy
#| echo: false
library(gt)
on18 %>%
group_by(Social_Use2) %>%
summarize(Bimodality=bimodality_coefficient(policy_polarization)) %>%
filter(!is.na(Social_Use2)) %>%
arrange(., desc(Bimodality)) %>%
gt() %>%
fmt_number(., columns=2, decimals=2)
#| echo: false
#| warning: false
#| label: fig-BC-SU
#| fig-cap: Bimodality Coefficents and policy position distributions by social media usage
gridExtra::grid.arrange(bimod_often, bimod_rarely)
#| label: fig-OVL-PM
#| echo: false
#| warning: false
#| fig-align: center
#| fig-cap: Overlap coefficents by primary media source for news about the provincial election.
ggpubr::ggarrange(overlap_legacy, overlap_online, overlap_smedia, overlap_mixed)
#| echo: false
#| fig-align: "center"
#| fig-cap: "Overlap Coefficents by Social Media Usage"
#| warning: false
#| label: fig-OVL-SU
ggpubr::ggarrange(overlap_often, overlap_rarely, ncol = 1)
#| label: fig-OVL-PM
#| echo: false
#| warning: false
#| fig-align: center
#| fig-cap: Overlap coefficents by primary media source for news about the provincial election.
ggpubr::ggarrange(overlap_legacy, overlap_online, overlap_smedia, overlap_mixed)
overlapping::overlap(list(policy_left_legacy_vector, policy_conservatives_legacy_vector))
overlapping::overlap(list(policy_left_legacy_vector, policy_conservatives_legacy_vector))
overlapping::overlap(list(policy_left_legacy_vector, policy_conservatives_legacy_vector))$OV
ov_policy_legacy<-overlapping::overlap(list(policy_left_legacy_vector, policy_conservatives_legacy_vector))$OV
overlap_legacy <- ggplot() + geom_density(aes(policy_polarization), data = policy_left_legacy, col = "red", fill = "red", alpha = 0.4) +
labs(title = "Legacy Media", subtitle = paste("Overlap Coefficent", ov_policy_legacy, sep=" "), x = "Policy Positions", y = NULL) +
geom_density(aes(policy_polarization), data = policy_conservatives_legacy, col = "blue", fill = "blue", alpha = 0.4) + theme_bw()
overlap_legacy
overlap_legacy <- ggplot() + geom_density(aes(policy_polarization), data = policy_left_legacy, col = "red", fill = "red", alpha = 0.4) +
labs(title = "Legacy Media", subtitle = round(paste("Overlap Coefficent", ov_policy_legacy, sep=" "),2), x = "Policy Positions", y = NULL) +
geom_density(aes(policy_polarization), data = policy_conservatives_legacy, col = "blue", fill = "blue", alpha = 0.4) + theme_bw()
ov_policy_legacy<-round(overlapping::overlap(list(policy_left_legacy_vector, policy_conservatives_legacy_vector))$OV,2)
overlap_legacy <- ggplot() + geom_density(aes(policy_polarization), data = policy_left_legacy, col = "red", fill = "red", alpha = 0.4) +
labs(title = "Legacy Media", subtitle = paste("Overlap Coefficent", ov_policy_legacy, sep=" "), x = "Policy Positions", y = NULL) +
geom_density(aes(policy_polarization), data = policy_conservatives_legacy, col = "blue", fill = "blue", alpha = 0.4) + theme_bw()
overlap_legacy
ov_policy_online<-round(overlapping::overlap(list(policy_left_online_vector, policy_conservatives_online_vector))$OV,2)
policy_left_media_vector <- as.double(policy_left_social_media$policy_polarization) %>%
na.omit()
policy_conservatives_media_vector <- as.double(policy_conservatives_media$policy_polarization) %>%
na.omit()
ov_policy_media<-round(overlapping::overlap(list(policy_left_media_vector, policy_conservatives_media_vector))$OV,2)
overlap_smedia <- ggplot() + geom_density(aes(policy_polarization), data = policy_left_social_media, col = "red", fill = "red", alpha = 0.4) +
labs(title = "Social Media", subtitle = paste("Overlap Coefficent", ov_policy_media, sep=" "), x = "Policy Positions", y = NULL) +
geom_density(aes(policy_polarization), data = policy_conservatives_media, col = "blue", fill = "blue", alpha = 0.4) + theme_bw()
overlap_smedia
ov_policy_mixed<-round(overlapping::overlap(list(policy_left_mixed_vector, policy_conservatives_mixed_vector))$OV,2)
overlap_mixed <- ggplot() + geom_density(aes(policy_polarization), data = policy_left_mixed, col = "red", fill = "red", alpha = 0.4) +
labs(title = "Mixed Media", subtitle = paste("Overlap Coefficent", ov_policy_mixed, sep=" "), x = "Policy Positions", y = NULL) +
geom_density(aes(policy_polarization), data = policy_conservatives_mixed, col = "blue", fill = "blue", alpha = 0.4) + theme_bw()
ggpubr::ggarrange(overlap_legacy, overlap_online, overlap_smedia, overlap_mixed)
overlap_legacy <- ggplot() + geom_density(aes(policy_polarization), data = policy_left_legacy, col = "red", fill = "red", alpha = 0.4) +
labs(title = "Legacy Media", subtitle = paste("Overlap Coefficent", ov_policy_legacy, sep=" "), x = "Policy Positions", y = NULL) +
geom_density(aes(policy_polarization), data = policy_conservatives_legacy, col = "blue", fill = "blue", alpha = 0.4) + theme_bw()
overlap_legacy
policy_left_online_vector <- as.double(policy_left_online$policy_polarization) %>%
na.omit()
policy_conservatives_online_vector <- as.double(policy_conservatives_online$policy_polarization) %>%
na.omit()
ov_policy_online<-round(overlapping::overlap(list(policy_left_online_vector, policy_conservatives_online_vector))$OV,2)
#overlapping::boot.overlap(list(policy_left_online_vector, policy_conservatives_online_vector), B = 1000)
#bayestestR::overlap(policy_left_online, policy_conservatives_online)
overlap_online <- ggplot() + geom_density(aes(policy_polarization), data = policy_left_online, col = "red", fill = "red", alpha = 0.4) +
labs(title = "Online Media", subtitle = paste("Overlap Coefficent", ov_policy_online, sep=" "), x = "Policy Positions", y = NULL) +
geom_density(aes(policy_polarization), data = policy_conservatives_online, col = "blue", fill = "blue", alpha = 0.4) + theme_bw()
policy_left_media_vector <- as.double(policy_left_social_media$policy_polarization) %>%
na.omit()
policy_conservatives_media_vector <- as.double(policy_conservatives_media$policy_polarization) %>%
na.omit()
ov_policy_media<-round(overlapping::overlap(list(policy_left_media_vector, policy_conservatives_media_vector))$OV,2)
#overlapping::boot.overlap(list(policy_left_media_vector, policy_conservatives_media_vector), B = 1000)
#bayestestR::overlap(policy_left_social_media, policy_conservatives_media)
overlap_smedia <- ggplot() + geom_density(aes(policy_polarization), data = policy_left_social_media, col = "red", fill = "red", alpha = 0.4) +
labs(title = "Social Media", subtitle = paste("Overlap Coefficent", ov_policy_media, sep=" "), x = "Policy Positions", y = NULL) +
geom_density(aes(policy_polarization), data = policy_conservatives_media, col = "blue", fill = "blue", alpha = 0.4) + theme_bw()
overlap_smedia
policy_left_mixed_vector <- as.double(policy_left_mixed$policy_polarization) %>%
na.omit()
policy_conservatives_mixed_vector <- as.double(policy_conservatives_mixed$policy_polarization) %>%
na.omit()
ov_policy_mixed<-round(overlapping::overlap(list(policy_left_mixed_vector, policy_conservatives_mixed_vector))$OV,2)
#set.seed(1234); overlapping::boot.overlap(list(policy_left_mixed_vector,
#policy_conservatives_mixed_vector), B = 1000)
#bayestestR::overlap(policy_left_mixed, policy_conservatives_mixed)
overlap_mixed <- ggplot() + geom_density(aes(policy_polarization), data = policy_left_mixed, col = "red", fill = "red", alpha = 0.4) +
labs(title = "Mixed Media", subtitle = paste("Overlap Coefficent", ov_policy_mixed, sep=" "), x = "Policy Positions", y = NULL) +
geom_density(aes(policy_polarization), data = policy_conservatives_mixed, col = "blue", fill = "blue", alpha = 0.4) + theme_bw()
ggpubr::ggarrange(overlap_legacy, overlap_online, overlap_smedia, overlap_mixed)
source("~/Documents/Stats/Ontario_2018/Code/3_polarization.R", echo=TRUE)
