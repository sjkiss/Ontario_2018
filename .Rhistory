)
mean(on18$wap_difference, na.rm = T)
#### DESCRIPTIVE STATISTICS ####
#### Primary Media ####
#Descriptive Statistics for political knowledge by Primary media
table(on18$Social_Use2, on18$pol_knowledge)
on18 %>%
group_by(Primary_media) %>%
summarise(mean = mean(pol_knowledge, na.rm = T), sd = sd(pol_knowledge, na.rm = T))
#### Primary Media and Media source ####
on18$HuffingtonPostonline
media_Sources_by_primarymedia <- on18 %>%
group_by(Primary_media) %>%
summarise(across(CBCTV:HuffingtonPostonline, \(x)mean(x))) %>%
filter(Primary_media == "Online") %>%
pivot_longer(cols = 2:22)
#see the most read sources for online news users
media_Sources_by_primarymedia %>%
ggplot(aes(y = name, x = value)) + geom_point()
#### Affective Polarization ####
on18 %>%
group_by(Social_Use2) %>%
summarise(mean = mean(WAP, na.rm = T), sd = sd(WAP, na.rm = T), n=n(), se=sd/sqrt(n))->mean_affect_scores
(on18 %>%
group_by(partyvote2018) %>%
summarise(Mean = mean(WAP, na.rm = T), Standard_Deviation = sd(WAP, na.rm = T), Minimum = min(WAP, na.rm = T), Maximum = max(WAP, na.rm = T), N=n()) %>%
rename(Group = partyvote2018) -> affect_scores_party)
(on18 %>%
group_by(Primary_media) %>%
summarise(Mean = mean(WAP, na.rm = T), Standard_Deviation = sd(WAP, na.rm = T), Minimum = min(WAP, na.rm = T), Maximum = max(WAP, na.rm = T), N=n()) %>%
rename(Group = Primary_media) -> affect_scores_primary_media)
mean(on18$WAP, na.rm = T); sd(on18$WAP, na.rm = T)
descripts_WAP <- rbind(tibble(Group = "Ontarians", Mean = mean(on18$WAP, na.rm = T),
Standard_Deviation = sd(on18$WAP, na.rm = T),
Minimum = min(on18$WAP, na.rm = T),
Maximum = max(on18$WAP, na.rm = T),
N = (length(!is.na(on18$WAP)))),
on18 %>%
group_by(Social_Use2) %>%
summarise(Mean = mean(WAP, na.rm = T), Standard_Deviation = sd(WAP, na.rm = T), Minimum = min(WAP, na.rm = T), Maximum = max(WAP, na.rm = T), N=n()) %>%
rename(Group = Social_Use2), affect_scores_party, affect_scores_primary_media)
kableExtra::kable(descripts_WAP, format = "pipe", digits = 3)
tibble(Group = "Ontarians", Mean = mean(on18$WAP, na.rm = T),
Standard_Deviation = sd(on18$WAP, na.rm = T),
Minimum = min(on18$WAP, na.rm = T),
Maximum = max(on18$WAP, na.rm = T),
N = (length(!is.na(on18$WAP))))
mean_affect_scores
mean_affect_scores %>%
filter(complete.cases(.)) %>%
ggplot(., aes(x = mean,
y = Social_Use2,
colour = Social_Use2)) +
geom_point()+
geom_errorbar(aes (xmin = mean - (1.96*se), xmax = mean + (1.96*se)), width =.2) +
labs(x = "Mean", y= "Social Media Use") +
theme_bw()  +
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
strip.text = element_text(size=8))+
guides(color=guide_legend(reverse=T))+xlim(c(0,0.5)) -> affect_scores_social_use; affect_scores_social_use
on18 %>%
group_by(Primary_media) %>%
summarise(mean = mean(Soc_dis, na.rm = T), sd = sd(Soc_dis, na.rm = T))
#### Policy Position Distribution ####
#Exploratory factor analysis
cor_policies <- on18 %>%
dplyr::select(c(help_racial_minorities, help_women, more_coporate_tax,
more_personal_tax, income_inequality, drug_benefit_u25, free_post_secondary,
lr_private_health_care, Lr_minimum_wage_to_high_prices, lr_business_benefits_everyone,
lr_inappropriate_sex_ed
)) %>%
cor(., use = "complete.obs")
eigen(cor_policies)$values
(policy_fa_analysis <- psych::fa(cor_policies, nfactors = 3))
policy_issues <- 'policy =~ help_racial_minorities + help_women + more_coporate_tax +
more_personal_tax + income_inequality + drug_benefit_u25 + free_post_secondary +
lr_private_health_care + Lr_minimum_wage_to_high_prices + lr_business_benefits_everyone +
lr_inappropriate_sex_ed'
cfa_policies <- cfa(policy_issues, data = on18)
summary(cfa_policies, fit.measures = T, standardized = T)
#### REGRESION MODELS ####
#Create regression models for affective polarization using the weighted affective polarization (WAP) measure
#**** Start thinking about control variables
WAP_reg <- list()
WAP_graph <- list()
WAP_reg[[1]] <- lm(WAP ~ Primary_media, data = on18, na.action = na.omit);summary(WAP_reg[[1]])
WAP_graph[[1]] <- graph_regression(WAP_reg[[1]]); WAP_graph[[1]]
WAP_reg[[2]] <- lm(WAP_sd ~ Interest, data = on18, na.action = na.omit); summary(WAP_reg[[2]])
WAP_graph[[2]] <- graph_regression(WAP_reg[[2]]); WAP_graph[[2]]
WAP_reg[[3]] <- lm(WAP_sd ~ Interest + Primary_media, data = on18, na.action = na.omit); summary(WAP_reg[[3]])
WAP_graph[[3]] <- graph_regression(WAP_reg[[3]]); WAP_graph[[3]]
WAP_reg[[4]] <- lm(WAP_sd ~ Interest + Primary_media + age3, data = on18, na.action = na.omit); summary(WAP_reg[[4]])
WAP_graph[[4]] <- graph_regression(WAP_reg[[4]]); WAP_graph[[4]]
WAP_reg[[5]] <- lm(WAP_sd ~ Interest + Primary_media + age3 + degree, data = on18, na.action = na.omit); summary(WAP_reg[[5]])
WAP_graph[[5]] <- graph_regression(WAP_reg[[5]]); WAP_graph[[5]]
WAP_reg[[6]] <- lm(WAP_sd ~ Interest + Primary_media + age3 + degree + income3, data = on18, na.action = na.omit); summary(WAP_reg[[6]])
WAP_graph[[6]] <- graph_regression(WAP_reg[[6]]); WAP_graph[[6]]
WAP_reg[[7]] <- lm(WAP_sd ~ Interest + Primary_media + age3 + degree + income3 + pol_knowledge, data = on18, na.action = na.omit); summary(WAP_reg[[7]])
WAP_graph[[7]] <- graph_regression(WAP_reg[[7]]); WAP_graph[[7]]
WAP_Interact <- lm(WAP_sd ~ Primary_media*Interest, data = on18, na.action = na.omit)
summary(WAP_Interact)
WAP_Interact2 <- lm(WAP_sd ~ Primary_media*Interest  + age3 + degree + income3 + pol_knowledge, data = on18, na.action = na.omit)
summary(WAP_Interact2)
#Visualize the marginal effects from the interaction effects
marginaleffects::plot_slopes(WAP_Interact, variables = "Interest", condition = "Primary_media") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
marginaleffects::plot_slopes(WAP_Interact2, variables = "Interest", condition = "Primary_media") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
#Display Models
modelsummary(WAP_reg, stars = T, vcov = "HC0") #As numbers
WAP_reg_df <- map(WAP_reg, tidy)
WAP_reg_df_ci <- map(WAP_reg, confint, level = 0.95, HC_type = "HC0")
WAP_reg_df_ci <- map(WAP_reg_df_ci, as_tibble)
WAP_reg_df <- bind_rows(WAP_reg_df, .id = "model_num")
WAP_reg_df_ci <- bind_rows(WAP_reg_df_ci) %>%
rename("conf.low" = "2.5 %", "conf.high" = "97.5 %")
WAP_reg_df <- bind_cols(WAP_reg_df, WAP_reg_df_ci)
model_names <- list(
"1" = "Model 1",
"2" = "Model 2",
"3" = "Model 3",
"4" = "Model 4",
"5" = "Model 5",
"6" = "Model 6",
"7" = "Model 7"
)
model_labeller <- function(variable, value){
return(model_names[value])
}
WAP_reg_df %>%
filter(!term == "(Intercept)") %>%
ggplot(aes(x = estimate, y = term, xmax = conf.high, xmin = conf.low)) + geom_point() +
geom_linerange() + geom_vline(xintercept = 0, lty = 4) +
facet_wrap(~model_num, ncol = 4, labeller = model_labeller) + theme_bw()
#Investigating the age coefficient
summary(lm(WAP_sd ~ age, data = on18))
summary(lm(WAP_sd ~ age + I(age^2), data = on18))
age_poly <- lm(WAP_sd ~ Interest + Primary_media  + age + I(age^2), data = on18, na.action = na.omit); summary(age_poly)
summary(lm(WAP_sd ~ Interest + Primary_media + age + I(age^2) + degree + income3 + pol_knowledge, data = on18, na.action = na.omit))
age_legacy <- data.frame(age = seq(18, 100, 1),
Primary_media = "Legacy",
Interest = mean(on18$Interest, na.rm = T))
age_legacy[, c("predicted_WAP",
"conf_up",
"conf_low")] <- predict(age_poly, age_legacy, interval = "confidence")
age_legacy$media <- "Legacy"
age_mixed <- data.frame(age = seq(18, 100, 1),
Primary_media = "Mixed",
Interest = mean(on18$Interest, na.rm = T))
age_mixed[, c("predicted_WAP",
"conf_up",
"conf_low")] <- predict(age_poly, age_mixed, interval = "confidence")
age_mixed$media <- "Mixed"
age_online <- data.frame(age = seq(18, 100, 1),
Primary_media = "Online",
Interest = mean(on18$Interest, na.rm = T))
age_online[, c("predicted_WAP",
"conf_up",
"conf_low")] <- predict(age_poly, age_online, interval = "confidence")
age_online$media <- "Online"
age_social_media <- data.frame(age = seq(18, 100, 1),
Primary_media = "Social_Media",
Interest = mean(on18$Interest, na.rm = T))
age_social_media[, c("predicted_WAP",
"conf_up",
"conf_low")] <- predict(age_poly, age_social_media, interval = "confidence")
age_social_media$media <- "Social Media"
age_predicted <- rbind(age_legacy, age_mixed, age_online, age_social_media)
age_predicted_graph <- age_predicted %>%
ggplot(aes(x = age, y = predicted_WAP, ymin = conf_low, ymax = conf_up)) +
geom_line(colour = "#008080") +  facet_wrap(~media) +
geom_ribbon(alpha = 0.2, fill = "aquamarine3") +
labs(x = "Age", y = "Predicted Level of Affective Polarization \n (WAP Score)") +
theme_bw()
#### Replicate models with the social use variable ####
WAP_reg_soc_use <- list()
WAP_reg_soc_use[[1]] <- lm(WAP_sd ~ Social_Use2, data = on18, na.action = na.omit);summary(WAP_reg_soc_use[[1]])
#WAP_graph[[1]] <- graph_regression(WAP_reg_soc_use[[1]]); WAP_graph[[1]]
WAP_reg_soc_use[[2]] <- lm(WAP_sd ~ Interest, data = on18, na.action = na.omit); summary(WAP_reg_soc_use[[2]])
#WAP_graph[[2]] <- graph_regression(WAP_reg_soc_use[[2]]); WAP_graph[[2]]
WAP_reg_soc_use[[3]] <- lm(WAP_sd ~ Interest + Social_Use2, data = on18, na.action = na.omit); summary(WAP_reg_soc_use[[3]])
#WAP_graph[[3]] <- graph_regression(WAP_reg_soc_use[[3]]); WAP_graph[[3]]
WAP_reg_soc_use[[4]] <- lm(WAP_sd ~ Interest + Social_Use2 + age3, data = on18, na.action = na.omit); summary(WAP_reg_soc_use[[4]])
#WAP_graph[[4]] <- graph_regression(WAP_reg_soc_use[[4]]); WAP_graph[[4]]
WAP_reg_soc_use[[5]] <- lm(WAP_sd ~ Interest + Social_Use2 + age3 + degree, data = on18, na.action = na.omit); summary(WAP_reg_soc_use[[5]])
#WAP_graph[[5]] <- graph_regression(WAP_reg_soc_use[[5]]); WAP_graph[[5]]
WAP_reg_soc_use[[6]] <- lm(WAP_sd ~ Interest + Social_Use2 + age3 + degree + income3, data = on18, na.action = na.omit); summary(WAP_reg_soc_use[[6]])
#WAP_graph[[6]] <- graph_regression(WAP_reg_soc_use[[6]]); WAP_graph[[6]]
WAP_reg_soc_use[[7]] <- lm(WAP_sd ~ Interest + Social_Use2 + age3 + degree + income3 + pol_knowledge, data = on18, na.action = na.omit); summary(WAP_reg_soc_use[[7]])
#WAP_graph[[7]] <- graph_regression(WAP_reg_soc_use[[7]]); WAP_graph[[7]]
modelsummary(WAP_reg_soc_use, stars = T, vcov = "HC0")
#ggarrange(plotlist = list(WAP_primarymedia_graph, WAP_Interest_Graph, WAP_Interact_graph))
#### Affective polarization models ####
#Create regression models for affective polarization using the weighted affective polarization (WAP) measure
WAP_lead_reg <- list()
WAP_lead_graph <- list()
WAP_lead_reg[[1]] <- lm(WAP_lead_sd ~ Primary_media, data = on18, na.action = na.omit);summary(WAP_lead_reg[[1]])
WAP_lead_graph[[1]] <- graph_regression(WAP_lead_reg[[1]]); WAP_lead_graph[[1]]
WAP_lead_reg[[2]] <- lm(WAP_lead_sd ~ Interest, data = on18, na.action = na.omit); summary(WAP_lead_reg[[2]])
WAP_lead_graph[[2]] <- graph_regression(WAP_lead_reg[[2]]); WAP_lead_graph[[2]]
WAP_lead_reg[[3]] <- lm(WAP_lead_sd ~ Interest + Primary_media, data = on18, na.action = na.omit); summary(WAP_lead_reg[[3]])
WAP_lead_graph[[3]] <- graph_regression(WAP_lead_reg[[3]]); WAP_lead_graph[[3]]
WAP_lead_reg[[4]] <- lm(WAP_lead_sd ~ Interest + Primary_media + age3, data = on18, na.action = na.omit); summary(WAP_lead_reg[[4]])
WAP_lead_graph[[4]] <- graph_regression(WAP_lead_reg[[4]]); WAP_lead_graph[[4]]
WAP_lead_reg[[5]] <- lm(WAP_lead_sd ~ Interest + Primary_media + age3 + degree, data = on18, na.action = na.omit); summary(WAP_lead_reg[[5]])
WAP_lead_graph[[5]] <- graph_regression(WAP_lead_reg[[5]]); WAP_lead_graph[[5]]
WAP_lead_reg[[6]] <- lm(WAP_lead_sd ~ Interest + Primary_media + age3 + degree + income3, data = on18, na.action = na.omit); summary(WAP_lead_reg[[6]])
WAP_lead_graph[[6]] <- graph_regression(WAP_lead_reg[[6]]); WAP_lead_graph[[6]]
WAP_lead_reg[[7]] <- lm(WAP_lead_sd ~ Interest + Primary_media + age3 + degree + income3 + pol_knowledge, data = on18, na.action = na.omit); summary(WAP_lead_reg[[7]])
WAP_lead_graph[[7]] <- graph_regression(WAP_lead_reg[[7]]); WAP_lead_graph[[7]]
WAP_lead_Interact <- lm(WAP_lead_sd ~ Primary_media*Interest, data = on18, na.action = na.omit)
summary(WAP_lead_Interact)
WAP_lead_Interact2 <- lm(WAP_lead_sd ~ Primary_media*Interest + age3 + degree + income3 + pol_knowledge, data = on18, na.action = na.omit)
summary(WAP_lead_Interact2)
#Visualize the marginal effects from the interaction effects
marginaleffects::plot_slopes(WAP_lead_Interact, variables = "Interest", condition = "Primary_media") +
geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + coord_flip() + theme_bw()
marginaleffects::plot_slopes(WAP_lead_Interact2, variables = "Interest", condition = "Primary_media") +
geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + coord_flip() + theme_bw()
#Display Models
modelsummary(WAP_lead_reg, stars = T, vcov = "HC0") #As numbers
#### BIMODALITY COEFFICENT ####
#### Primary Media ####
bimod_online <- bimodality_coefficient(policy_online, na.rm = T); bimod_online
bimod_leacgy <- bimodality_coefficient(policy_legacy, na.rm = T); bimod_leacgy
bimodality_coefficient(policy_social_media, na.rm = T)
bimodality_coefficient(policy_mixed, na.rm = T)
bimod_legacy <- policy_legacy %>%
ggplot() + geom_density(aes(policy_polarization), col = "seagreen", fill = "seagreen", alpha = 0.4) +
labs(title = "Legacy Media", subtitle = "Bimodality Coefficent (0.29)", x = "Policy Positions", y = NULL) +
theme_bw()
bimod_online <- policy_online %>%
ggplot() + geom_density(aes(policy_polarization), col = "seagreen", fill = "seagreen", alpha = 0.4) +
labs(title = "Online Media", subtitle = "Bimodality Coefficent (0.36)", x = "Policy Positions", y = NULL) +
theme_bw()
bimod_social <- policy_social_media %>%
ggplot() + geom_density(aes(policy_polarization), col = "seagreen", fill = "seagreen", alpha = 0.4) +
labs(title = "Social Media", subtitle = "Bimodality Coefficent (0.31)", x = "Policy Positions", y = NULL) +
theme_bw()
bimod_mixed <- policy_mixed %>%
ggplot() + geom_density(aes(policy_polarization), col = "seagreen", fill = "seagreen", alpha = 0.4) +
labs(title = "Mixed media", subtitle = "Bimodality Coefficent (0.32)", x = "Policy Positions", y = NULL) +
theme_bw()
gridExtra::grid.arrange(bimod_legacy, bimod_online, bimod_social, bimod_mixed)
summary(lm(imm_sentiment ~ WAP, data = on18))
summary(lm(fin_sentiment ~ WAP, data = on18))
summary(lm(imm_sentiment ~ WAP, data = on18))
summary(lm(fin_sentiment ~ WAP, data = on18))
summary(lm(imm_sentiment ~ WAP, data = on18))
Interest_pm
Interest_pm <- lm(Interest ~ Primary_media, data = on18, na.action = na.omit); summary(Interest_pm)
Interest_su <- lm(Interest ~ Social_Use2, data = on18, na.action = na.omit); summary(Interest_su)
#Visualize the marginal effects from the interaction effects
marginaleffects::plot_slopes(WAP_Interact, variables = "Interest", condition = "Primary_media") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
source("~/Documents/Stats/Ontario_2018/Code/3_polarization.R", echo=TRUE)
#Visualize the marginal effects from the interaction effects
marginaleffects::plot_slopes(WAP_Interact, variables = "Interest", condition = "Primary_media") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
marginaleffects::plot_slopes(WAP_Interact2, variables = "Interest", condition = "Primary_media") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
#Visualize the marginal effects from the interaction effects
marginaleffects::plot_slopes(WAP_Interact, variables = "Interest", condition = "Primary_media") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
WAP_Interact2 <- lm(WAP_sd ~ Social_Use2*Interest  + age3 + degree + income3 + pol_knowledge, data = on18, na.action = na.omit)
#Visualize the marginal effects from the interaction effects
marginaleffects::plot_slopes(WAP_Interact, variables = "Interest", condition = "Primary_media") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
marginaleffects::plot_slopes(WAP_Interact2, variables = "Interest", condition = "Primary_media") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
WAP_Interact2 <- lm(WAP_sd ~ Social_Use2*Interest  + age3 + degree + income3 + pol_knowledge, data = on18, na.action = na.omit)
marginaleffects::plot_slopes(WAP_Interact2, variables = "Interest", condition = "Social_Use2") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
#Visualize the marginal effects from the interaction effects
marginaleffects::plot_slopes(WAP_Interact, variables = "Primary_media", condition = "Interest") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
marginaleffects::plot_slopes(WAP_Interact2, variables = "Primary_media", condition = "Interest") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
marginaleffects::plot_slopes(WAP_Interact2, variables = "Social_Use", condition = "Interest") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
marginaleffects::plot_slopes(WAP_Interact2, variables = "Social_Use2", condition = "Interest") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
WAP_Interact2 <- lm(WAP_sd ~ as.numeric(Social_Use2)*Interest  + age3 + degree + income3 + pol_knowledge, data = on18, na.action = na.omit)
summary(WAP_Interact2)
marginaleffects::plot_slopes(WAP_Interact2, variables = "Social_Use2", condition = "Interest") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
WAP_Interact2 <- lm(WAP_sd ~ as.numeric(Social_Use2)*Interest  + age3 + degree + income3 + pol_knowledge, data = on18, na.action = na.omit)
summary(WAP_Interact2)
marginaleffects::plot_slopes(WAP_Interact2, variables = "Social_Use2", condition = "Interest") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + theme_bw()
#Visualize the marginal effects from the interaction effects
marginaleffects::plot_slopes(WAP_Interact, variables = "Primary_media", condition = "Interest") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + labs(facet = c("PM1", "PM2", "PM3")) + theme_bw()
#Visualize the marginal effects from the interaction effects
marginaleffects::plot_slopes(WAP_Interact, variables = "Primary_media", condition = "Interest") + geom_hline(yintercept  = 0, lty = "dashed", col = "forestgreen") + labs(y = "Marginal Effect of Primary Media Variable") + theme_bw()
?bam
??bam
mgcv::gam(WAP_sd ~ s(age3) Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
mgcv::gam(WAP_sd ~ s(age3) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
mgcv::gam(WAP_sd ~ s(age3) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18) %>%
modelsummary()
mgcv::bam(WAP_sd ~ s(age3) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18) %>%
modelsummary()
mgcv::bam(WAP_sd ~ s(age3) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
library(mgcv)
mgcv::gam(WAP_sd ~ s(age3) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18) %>%
modelsummary()
mgcv::gam(WAP_sd ~ s(age3) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
gam_model <- mgcv::gam(WAP_sd ~ s(age3) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18) %>%
modelsummary()
gam_model <- mgcv::gam(WAP_sd ~ s(age3) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
modelsummary(Primary_media)
modelsummary(gam_model)
modelsummary(gam_model, stars = T)
draw(gam_model)
??draw
library(gratia)
draw(gam_model, residuals = T)
unique(on18$age3)
unique(on18$age2)
unique(on18$age1)
unique(on18$age)
on18 <- on18 %>%
mutate(age = replace(age, age == 117, NA))
on18$age2<-recode(on18$age, "45:100=1; 0:44=0; else=NA")
on18$age3<-scales::rescale(on18$age, to=c(0,1))
gam_model <- mgcv::gam(WAP_sd ~ s(age) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
draw(gam_model, residuals = T)
#Investigating the age coefficient
summary(lm(WAP_sd ~ age, data = on18))
summary(lm(WAP_sd ~ age + I(age^2), data = on18))
age_poly <- lm(WAP_sd ~ Interest + Primary_media  + age + I(age^2), data = on18, na.action = na.omit); summary(age_poly)
summary(lm(WAP_sd ~ Interest + Primary_media + age + I(age^2) + degree + income3 + pol_knowledge, data = on18, na.action = na.omit))
age_legacy <- data.frame(age = seq(18, 100, 1),
Primary_media = "Legacy",
Interest = mean(on18$Interest, na.rm = T))
age_legacy[, c("predicted_WAP",
"conf_up",
"conf_low")] <- predict(age_poly, age_legacy, interval = "confidence")
age_legacy$media <- "Legacy"
age_mixed <- data.frame(age = seq(18, 100, 1),
Primary_media = "Mixed",
Interest = mean(on18$Interest, na.rm = T))
age_mixed[, c("predicted_WAP",
"conf_up",
"conf_low")] <- predict(age_poly, age_mixed, interval = "confidence")
age_mixed$media <- "Mixed"
age_online <- data.frame(age = seq(18, 100, 1),
Primary_media = "Online",
Interest = mean(on18$Interest, na.rm = T))
age_online[, c("predicted_WAP",
"conf_up",
"conf_low")] <- predict(age_poly, age_online, interval = "confidence")
age_online$media <- "Online"
age_social_media <- data.frame(age = seq(18, 100, 1),
Primary_media = "Social_Media",
Interest = mean(on18$Interest, na.rm = T))
age_social_media[, c("predicted_WAP",
"conf_up",
"conf_low")] <- predict(age_poly, age_social_media, interval = "confidence")
age_social_media$media <- "Social Media"
age_predicted <- rbind(age_legacy, age_mixed, age_online, age_social_media)
age_predicted_graph <- age_predicted %>%
ggplot(aes(x = age, y = predicted_WAP, ymin = conf_low, ymax = conf_up)) +
geom_line(colour = "#008080") +  facet_wrap(~media) +
geom_ribbon(alpha = 0.2, fill = "aquamarine3") +
labs(x = "Age", y = "Predicted Level of Affective Polarization \n (WAP Score)") +
theme_bw()
age_predicted_graph
gam_model <- mgcv::gam(WAP_sd ~ s(age) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
draw(gam_model, residuals = T)
gam_model <- mgcv::gam(WAP ~ s(age) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
draw(gam_model, residuals = T)
gam_model <- mgcv::gam(WAP_sd ~ s(age) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
draw(gam_model, residuals = T)
gam_model <- mgcv::gam(WAP_sd ~ s(age) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
#### LOAD SCRIPTS ####
source("Code/1_load_on18.R") #clean and load dataset
source("Code/0_functions.R") #load custom functions and packages needed for these analyses
gam_model <- mgcv::gam(WAP_sd ~ s(age) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
draw(gam_model, residuals = T)
??draw
library(gratia)
gam_model <- mgcv::gam(WAP_sd ~ s(age) + Primary_media + Interest + degree + income3 + pol_knowledge, data = on18)
draw(gam_model, residuals = T)
gridExtra::grid.arrange(bimod_legacy, bimod_online, bimod_social, bimod_mixed)
source("Code/1_LSDprep_dec2017.R")
source("Code/2_add_emotion_variables.R")
install.packages("rio")
source("Code/1_LSDprep_dec2017.R")
source("Code/2_add_emotion_variables.R")
install.packages(openxlsx)
install.packages("openxlsx")
source("Code/1_LSDprep_dec2017.R")
source("Code/2_add_emotion_variables.R")
install.packages("here")
source("Code/1_LSDprep_dec2017.R")
source("Code/2_add_emotion_variables.R")
library(here)
source("Code/1_LSDprep_dec2017.R")
source("Code/2_add_emotion_variables.R")
on18 %>%
ungroup() ->on18
on18 %>%   select(imm.y) %>%
slice(285) %>%
View()
#### LSD ####
library(quanteda)
on18$fin.y.LSD<-LSDprep_contr(on18$fin.y)
on18$imm.y.LSD<-LSDprep_contr(on18$imm.y)
on18$fin.y.LSD1<-LSDprep_dict_punct(on18$fin.y.LSD)
on18$imm.y.LSD1<-LSDprep_dict_punct(on18$imm.y.LSD)
#Check that this worked
on18 %>%
filter(str_detect(imm.y.LSD1, "xtoo")) %>%
select(imm.y.LSD1)
on18$fin.y.LSD2<-LSDprep_punctspace(on18$fin.y.LSD1)
on18$imm.y.LSD2<-LSDprep_punctspace(on18$imm.y.LSD1)
#Check that this works
on18 %>%
select(ends_with("LSD2")) %>%
print(n=100)
Discrete_emotions <- dictionary(
list(
anger = scan("Data/DED.Mar22.anger.txt", character(), quote = ""),
aniexty = scan("Data/DED.Mar22.anxiety.txt", character(), quote = ""),
sadness = scan("Data/DED.Mar22.sadness.txt", character(), quote = ""),
optimism = scan("Data/DED.Mar22.optimism.txt", character(), quote = "")
))
tokens(on18$fin.y.LSD4) %>%
dfm() %>%
dfm_weight(., scheme="prop") %>%
dfm_lookup(., dictionary=Discrete_emotions) ->fin_des_dfm
on18$fin.y.LSD<-LSDprep_contr(on18$fin.y)
on18$imm.y.LSD<-LSDprep_contr(on18$imm.y)
on18$fin.y.LSD1<-LSDprep_dict_punct(on18$fin.y.LSD)
on18$imm.y.LSD1<-LSDprep_dict_punct(on18$imm.y.LSD)
#Check that this worked
on18 %>%
filter(str_detect(imm.y.LSD1, "xtoo")) %>%
select(imm.y.LSD1)
on18$fin.y.LSD2<-LSDprep_punctspace(on18$fin.y.LSD1)
on18$imm.y.LSD2<-LSDprep_punctspace(on18$imm.y.LSD1)
#Check that this works
on18 %>%
select(ends_with("LSD2")) %>%
print(n=100)
on18$fin.y.LSD3<-LSDprep_negation(on18$fin.y.LSD2)
on18$imm.y.LSD3<-LSDprep_negation(on18$imm.y.LSD2)
on18 %>%
select(ends_with("LSD3")) %>%
print(n=100)
tokens_lookup(tokens(on18$fin.y.LSD4),
dictionary=data_dictionary_LSD2015)
on18 %>%
select(ends_with("LSD3"))
on18 %>%
filter(str_detect(fin.y, pattern = " (N|n)ot much " )) %>%
select(fin.y, fin.y.LSD3)
#
on18$fin.y.LSD4<-LSDprep_dict(on18$fin.y.LSD3)
on18$imm.y.LSD4<-LSDprep_dict(on18$imm.y.LSD3)
#Get proportion counts
tokens (on18$fin.y.LSD4) %>%
dfm() %>%
dfm_lookup(., dictionary=data_dictionary_LSD2015) ->fin_dfm
tokens (on18$imm.y.LSD4) %>%
dfm() %>%
dfm_lookup(., dictionary=data_dictionary_LSD2015) ->imm_dfm
# #chck this.
#Repeat but get proportions
fin_dfm
tokens(on18$imm.y.LSD4) %>%
dfm() %>%
dfm_weight(., scheme="prop") %>%
dfm_lookup(., dictionary=data_dictionary_LSD2015) ->imm_dfm
# Take the fin_dfm of proportions of negative and positive words about personal financial sentiment
fin_dfm %>%
#Convert to data frame
quanteda::convert(., to="data.frame") %>%
#Subtract negative from positive as per Young and Soroka (2012) p. 215
mutate(fin_sentiment=positive-negative) %>%
#Select only fin_sentement
select(fin_sentiment) %>%
#bind cols to on18
bind_cols(on18, .)->on18
#Repeat with immigration sentiment
imm_dfm %>%
quanteda::convert(., to="data.frame") %>%
mutate(imm_sentiment=positive-negative) %>%
select(imm_sentiment) %>%
bind_cols(on18, .)->on18
Discrete_emotions <- dictionary(
list(
anger = scan("Data/DED.Mar22.anger.txt", character(), quote = ""),
aniexty = scan("Data/DED.Mar22.anxiety.txt", character(), quote = ""),
sadness = scan("Data/DED.Mar22.sadness.txt", character(), quote = ""),
optimism = scan("Data/DED.Mar22.optimism.txt", character(), quote = "")
))
#
tokens(on18$fin.y.LSD4) %>%
dfm() %>%
dfm_weight(., scheme="prop") %>%
dfm_lookup(., dictionary=Discrete_emotions) ->fin_des_dfm
tokens(on18$imm.y.LSD4) %>%
dfm() %>%
dfm_weight(., scheme="prop") %>%
dfm_lookup(., dictionary=Discrete_emotions) ->imm_des_dfm
fin_des_dfm
table(fin_des_dfm$anger)
imm_des_dfm
fin_des_dfm
summary(lm(imm_sentiment ~ WAP, data = on18))
summary(lm(fin_sentiment ~ WAP, data = on18))
summary(lm(imm_sentiment ~ WAP, data = on18))
summary(lm(fin_sentiment ~ WAP, data = on18))
summary(lm(imm_sentiment ~ WAP, data = on18))
summary(lm(imm_sentiment ~ WAP*Media, data = on18))
lm(imm_sentiment ~ WAP*Media, data = on18) %>%
marginaleffects::plot_slopes(by = "Media", variables = "WAP")
on18$Media
summary(lm(imm_sentiment~Media, data=on18))
lm(imm_sentiment ~ WAP*Primary_Media, data = on18) %>%
marginaleffects::plot_slopes(by = "Media", variables = "WAP")
lm(imm_sentiment ~ WAP*Primary_Media, data = on18) %>%
marginaleffects::plot_slopes(by = "Primary_Media", variables = "WAP")
lm(imm_sentiment ~ WAP*Primary_Media, data = on18)
