policies_sd_social_dis_down <- policies_social_use_sd_dis_mean %>%
pivot_longer(cols = !Social_Use2,
names_to = c("Policy_Issue", ".value"),
names_sep = "\\." )
source("~/Documents/Stats/Ontario_2018/Code/3_polarization.R", echo=TRUE)
source("~/Documents/Stats/Ontario_2018/Code/3_polarization.R", echo=TRUE)
mods_Interest %>%
ggplot(aes(x = estimate, y = term)) + geom_point() +
geom_linerange(aes(xmin=conf.low, xmax = conf.high), position = position_dodge(width=.75)) +
facet_wrap(~Policy_Issue, labeller = label_wrap_gen(width=30)) + geom_vline(xintercept = 0) + theme_bw()
source("~/Documents/Stats/Ontario_2018/Code/3_polarization.R", echo=TRUE)
mods_media %>%
ggplot(aes(x = estimate, y = term)) + geom_point() +
geom_linerange(aes(xmin=conf.low, xmax = conf.high), position = position_dodge(width=.75)) +
facet_wrap(~Policy_Issue, labeller = label_wrap_gen(width=30)) + geom_vline(xintercept = 0) + theme_bw()
unique(on18$pointerst_ONint
)
mods_all <- policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ pointerst_ONint * Primary_Media))) %>%
mutate(tidied = map(lm_mod, tidy, conf.int = T)) %>%
unnest(tidied)
mods_all %>%
ggplot(aes(x = estimate, y = term)) + geom_point() +
geom_linerange(aes(xmin=conf.low, xmax = conf.high), position = position_dodge(width=.75)) +
facet_wrap(~Policy_Issue, labeller = label_wrap_gen(width=30)) + geom_vline(xintercept = 0) + theme_bw()
affect_scores_social_use
mods_Interest %>%
unnest(tidied) %>%
filter(term!="(Intercept)") %>%
ggplot(aes(x = estimate, y = term)) + geom_point() +
geom_linerange(aes(xmin=conf.low, xmax = conf.high), position = position_dodge(width=.75)) +
facet_wrap(~Policy_Issue, labeller = label_wrap_gen(width=30)) + geom_vline(xintercept = 0) + theme_bw()
source("~/Documents/Stats/Ontario_2018/Code/3_polarization.R", echo=TRUE)
policies_social_use_sd_dis_mean
policies_sd_social_dis_down <- policies_social_use_sd_dis_mean %>%
pivot_longer(cols = !Social_Use2,
names_to = c("Policy_Issue", "value"),
names_sep = "\\." )
policies_social_use_sd_dis %>%
group_by(Social_Use2) %>%
summarise( across(everything(), list(.mean = mean, se = se), na.rm = T )) -> policies_social_use_sd_dis_mean
policies_social_use_sd_dis_mean
on18 <- cbind(on18, policies_social_use_sd_dis)
policies_sd_social_dis_down <- policies_social_use_sd_dis_mean %>%
pivot_longer(cols = !Social_Use2,
names_to = c("Policy_Issue", ".value"),
names_sep = "\\." )
policies_social_use_sd_dis %>%
group_by(Social_Use2) %>%
summarise( across(everything(), list(mean = mean, se = se), na.rm = T )) -> policies_social_use_sd_dis_mean
policies_social_use_sd_dis_mean
on18 <- cbind(on18, policies_social_use_sd_dis)
policies_sd_social_dis_down <- policies_social_use_sd_dis_mean %>%
pivot_longer(cols = !Social_Use2,
names_to = c("Policy_Issue", "value"),
names_sep = "\\." )
policies_social_use_sd_dis %>%
group_by(Social_Use2) %>%
summarise( across(everything(), list(.mean = mean, se = se), na.rm = T )) -> policies_social_use_sd_dis_mean
policies_social_use_sd_dis_mean
on18 <- cbind(on18, policies_social_use_sd_dis)
policies_sd_social_dis_down <- policies_social_use_sd_dis_mean %>%
pivot_longer(cols = !Social_Use2,
names_to = c("Policy_Issue", ".value"),
names_sep = "\\." )
policies_sd_social_dis_down
se <- function(x, ...){
sd <- sd(x,...)
n <- n()
se <- sd/sqrt(n)
}
policies_social_use_sd_dis %>%
group_by(Social_Use2) %>%
summarise( across(everything(), list(.mean = mean, se = se), na.rm = T )) -> policies_social_use_sd_dis_mean
on18 <- cbind(on18, policies_social_use_sd_dis)
mods_Interest %>%
unnest(tidied) %>%
filter(term!="(Intercept)") %>%
ggplot(aes(x = estimate, y = term)) + geom_point() +
geom_linerange(aes(xmin=conf.low, xmax = conf.high), position = position_dodge(width=.75)) +
facet_wrap(~Policy_Issue, labeller = label_wrap_gen(width=30)) + geom_vline(xintercept = 0) + theme_bw()
mean(policies$help_racial_minorities, na.rm = T)
sd(policies$help_racial_minorities, na.rm = T)
#observation #1
# 0.95 = (x-x̄)/σ
# 0.95 = (0.75-0.481)/0.282
# 0.95 = 0.95
policies_social_use_sd_dis %>%
bind_cols(., on18$Primary_media) %>%
bind_cols(., on18$Interest) ->policies_social_use_sd_dis2
names(policies_social_use_sd_dis2)<-c(policy_names, "Social_Use2", "Primary_Media", "Interest")
policies_social_use_sd_dis2 %>%
pivot_longer(cols = 1:11, names_to = "Policy_Issue", values_to = "distance") -> policies_social_use_sd_dis2_down
policies_social_use_sd_dis2_down
# pivot_longer(cols = !Social_Use2,
#              names_to = c("Policy_Issue", ".value"),
#              names_sep = "\\." )
mods_Interest <- policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ Interest))) %>%
mutate(tidied = map(lm_mod, tidy, conf.int = T))
mods_Interest
library(modelsummary)
modelsummary(mods_Interest$lm_mod, stars=T)
modelsummary(mods_Interest$lm_mod, stars=T)
mods_Interest %>%
unnest(tidied) %>%
filter(term!="(Intercept)") %>%
ggplot(., aes(x=estimate, y=fct_reorder(Policy_Issue, estimate)))+
geom_pointrange(aes(xmin=estimate-(1.96*std.error), xmax=estimate+(1.96*std.error)))
install.packages("modelsummary")
install.packages("modelsummary")
library(modelsummary)
modelsummary(mods_Interest$lm_mod, stars=T)
mods_media %>%
unnest(tidied) %>%
filter(term!="(Intercept)") %>%
ggplot(aes(x = estimate, y = term)) + geom_point() +
geom_linerange(aes(xmin=conf.low, xmax = conf.high), position = position_dodge(width=.75)) +
facet_wrap(~Policy_Issue, labeller = label_wrap_gen(width=30)) + geom_vline(xintercept = 0) + theme_bw()
mods_media <- policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ Primary_Media))) %>%
mutate(tidied = map(lm_mod, tidy, conf.int = T))
mods_media <- policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ Primary_Media))) %>%
mutate(tidied = map(lm_mod, tidy, conf.int = T))
mods_all <- policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ Interest + Primary_Media))) %>%
mutate(tidied = map(lm_mod, tidy, conf.int = T))
modelsummary(mods_all$lm_mod, stars=T)
install.packages("sjPlot")
modelsummary(mods_all$lm_mod, stars=T)
library(sjPlot)
install.packages("insight")
install.packages("insight")
source("~/Documents/Stats/Ontario_2018/Code/3_polarization.R", echo=TRUE)
mods_Interest <- policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ Interest))) %>%
mutate(tidied = map(lm_mod, tidy, conf.int = T))
mods_Interest
library(modelsummary)
modelsummary(mods_Interest$lm_mod, stars=T)
#Make graph
mods_Interest %>%
unnest(tidied) %>%
filter(term!="(Intercept)") %>%
ggplot(., aes(x=estimate, y=fct_reorder(Policy_Issue, estimate)))+
geom_pointrange(aes(xmin=estimate-(1.96*std.error), xmax=estimate+(1.96*std.error)))
table(on18$Primary_media)
mods_media <- policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ Primary_Media))) %>%
mutate(tidied = map(lm_mod, tidy, conf.int = T))
modelsummary(mods_media$lm_mod, stars=T)
mods_media$lm_mod
mods_media %>%
unnest(tidied) %>%
filter(term!="(Intercept)") %>%
ggplot(., aes(x=estimate, y=fct_reorder(Policy_Issue, estimate), col=term))+
geom_pointrange(position="jitter", aes(xmin=estimate-(1.96*std.error), xmax=estimate+(1.96*std.error)))
mods_all <- policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ Interest + Primary_Media))) %>%
mutate(tidied = map(lm_mod, tidy, conf.int = T))
modelsummary(mods_all$lm_mod, stars=T)
#graph models
mods_Interest %>%
unnest(tidied) %>%
filter(term!="(Intercept)") %>%
ggplot(aes(x = estimate, y = term)) + geom_point() +
geom_linerange(aes(xmin=conf.low, xmax = conf.high), position = position_dodge(width=.75)) +
facet_wrap(~Policy_Issue, labeller = label_wrap_gen(width=30)) + geom_vline(xintercept = 0) + theme_bw()
mods_media %>%
unnest(tidied) %>%
filter(term!="(Intercept)") %>%
ggplot(aes(x = estimate, y = term)) + geom_point() +
geom_linerange(aes(xmin=conf.low, xmax = conf.high), position = position_dodge(width=.75)) +
facet_wrap(~Policy_Issue, labeller = label_wrap_gen(width=30)) + geom_vline(xintercept = 0) + theme_bw()
mods_all %>%
unnest(tidied) %>%
filter(term!="(Intercept)") %>%
ggplot(aes(x = estimate, y = term)) + geom_point() +
geom_linerange(aes(xmin=conf.low, xmax = conf.high), position = position_dodge(width=.75)) +
facet_wrap(~Policy_Issue, labeller = label_wrap_gen(width=30)) + geom_vline(xintercept = 0) + theme_bw()
modelsummary(mods_all$lm_mod, stars=T)
policies_social_use_sd_dis %>%
group_by(Social_Use2) %>%
summarise( across(everything(), list(.mean = mean, se = se), na.rm = T )) -> policies_social_use_sd_dis_mean
policies_social_use_sd_dis_mean
on18 <- cbind(on18, policies_social_use_sd_dis)
policies_sd_social_dis_down <- policies_social_use_sd_dis_mean %>%
pivot_longer(cols = !Social_Use2,
names_to = c("Policy_Issue", ".value"),
names_sep = "\\." )
policies_sd_social_dis_down
policies_social_use_sd_dis_mean
View(policies_social_use_sd_dis_mean)
policies_social_use_sd_dis %>%
group_by(Social_Use2) %>%
summarise( across(everything(), list(.mean = mean, .se = se), na.rm = T )) -> policies_social_use_sd_dis_mean
policies_social_use_sd_dis_mean
on18 <- cbind(on18, policies_social_use_sd_dis)
policies_sd_social_dis_down <- policies_social_use_sd_dis_mean %>%
pivot_longer(cols = !Social_Use2,
names_to = c("Policy_Issue", ".value"),
names_sep = "\\." )
policies_sd_social_dis_down
policies_social_use_sd_dis %>%
group_by(Social_Use2) %>%
summarise( across(everything(), list(.mean = mean, .se = se), na.rm = T )) -> policies_social_use_sd_dis_mean
policies_social_use_sd_dis_mean
stopifnot((isTRUE(all.equal(on18$pol_knowledge,
((on18$unsg_correct + on18$financename_correct + on18$ggname_correct + on18$nhse_correct)/4)))))
policies_sd_social_dis_down
policies_social_use_sd_dis_mean
stopifnot(policies_social_use_sd_dis_mean[ , 1] != 0.95)
policies_social_use_sd_dis_mean[ , 1]
policies_social_use_sd_dis_mean[1 , 2]
policies_social_use_sd_dis2
#observation #1
# 0.95 = (x-x̄)/σ
# 0.95 = (0.75-0.481)/0.282
(0.75-0.481)/0.282
stopifnot(policies_social_use_sd_dis2[1 , 2] != (0.75-0.481)/0.282)
#observation #1
# 0.95 = (x-x̄)/σ
# 0.95 = (0.75-0.481)/0.282
# 0.95 = 0.95
stopifnot(policies_social_use_sd_dis2[1 , 2] == (0.75-0.481)/0.282)
#observation #1
# 0.95 = (x-x̄)/σ
# 0.95 = (0.75-0.481)/0.282
# 0.95 = 0.95
stopifnot(policies_social_use_sd_dis2[1 , 2] == round((0.75-0.481)/0.282, 3))
policies_social_use_sd_dis2[1 , 2]
#observation #1
# 0.95 = (x-x̄)/σ
# 0.95 = (0.75-0.481)/0.282
# 0.95 = 0.95
stopifnot(policies_social_use_sd_dis2[1 , 1] == round((0.75-0.481)/0.282, 3))
policies_social_use_sd_dis2[1 , 1]
round((0.75-0.481)/0.282, 3)
mean(policies$help_racial_minorities, na.rm = T)
sd(policies$help_racial_minorities, na.rm = T)
policies$help_racial_minorities
#observation #1
# 0.95 = (x-x̄)/σ
# 0.95 = (0.75-0.481)/0.282
# 0.95 = 0.95
stopifnot(policies_social_use_sd_dis2[1 , 1] == round((0.75-0.4809809)/ 0.2815165, 3))
round((0.75-0.4809809)/ 0.2815165, 3)
policies_social_use_sd_dis2[1 , 1]
#observation #1
# 0.95 = (x-x̄)/σ
# 0.95 = (0.75-0.481)/0.282
# 0.95 = 0.95
stopifnot(policies_social_use_sd_dis2[1 , 1] == (0.75-0.4809809)/ 0.2815165)
#observation #1
# 0.95 = (x-x̄)/σ
# 0.95 = (0.75-0.481)/0.282
# 0.95 = 0.95
stopifnot(policies_social_use_sd_dis2[1 , 1] == ((0.75-0.4809809)/ 0.2815165))
round(policies_social_use_sd_dis2[1 , 1], 3)
#observation #1
# 0.95 = (x-x̄)/σ
# 0.95 = (0.75-0.481)/0.282
# 0.95 = 0.95
stopifnot(round(policies_social_use_sd_dis2[1 , 1], 3) == round(((0.75-0.4809809)/ 0.2815165), 3))
policies_social_use_sd_dis2[1 , 1]
0.75-0.4809809)/ 0.2815165
((0.75-0.4809809)/ 0.2815165)
round(((0.75-0.4809809)/ 0.2815165), 3)
stopifnot(round(policies_social_use_sd_dis2[1 , 1], 3) == round(((0.75-0.4809809)/ 0.2815165), 3))
stopifnot(round(policies_social_use_sd_dis2[1 , 1], 3) == round(((0.75-0.4809809)/ 0.2815165), 3))
#observation #1
# 0.95 = (x-x̄)/σ
# 0.95 = (0.75-0.481)/0.282
# 0.95 = 0.95
stopifnot(round(policies_social_use_sd_dis2[1 , 1], 3) == round(((0.75-0.4809809)/ 0.3815165), 3))
#observation #1
# 0.95 = (x-x̄)/σ
# 0.95 = (0.75-0.481)/0.282
# 0.95 = 0.95
stopifnot(round(policies_social_use_sd_dis2[1 , 1], 3) == round(((0.75-0.4809809)/ 0.2815165), 3))
# Always start with the data frame
on18 %>%
#We are transforming variables so we use mutate
# We are going to be applying a function across several columns, so we use
# across()
#Importantly, we can use the same select() semantics inside across()
#in this case we can select the variables from unsg to nhse, including the ones in between
#We only know this really through poking and actually looking at the data columns. Even in SPSS if necessary.
mutate(
across(.cols=unsg:nhse,
#Now add in the function we are going to apply.
#Note that if_else is just a dplyr version of ifelse()
binaryrecode,
# A cool feature of across() is that you can add a suffix or a prefix
#This will paste the name of the column with _correct
#Exactly like you did above.
.names="{.col}_correct")
)->on18
#Add in a line that sources the first script 1_load_on18
source("Code/1_load_on18.R")
#Always a good idea to throw a check in here.
names(on18)
#### Primary News Source ####
on18 %>%
mutate(Primary_media=case_when(
(primarynews_7 == 1 | primarynews_6 == 1) & (primarynews_5 == 0 & primarynews_4 == 0 & primarynews_3 == 0 & primarynews_2 == 0 & primarynews_1 == 0) ~ "Social_Media",
(primarynews_4 == 1 | primarynews_5 == 1) & (primarynews_6 == 0 & primarynews_7 == 0 & primarynews_3 == 0 & primarynews_2 == 0 & primarynews_1 == 0) ~ "Online",
(primarynews_3 == 1 | primarynews_2 == 1 | primarynews_1 == 1) & (primarynews_5 == 0 & primarynews_4 == 0 & primarynews_6 == 0 & primarynews_7 == 0) ~ "Legacy",
TRUE ~ "Mixed"
))->on18
on18 %>%
mutate(Primary_media2=case_when(
(primarynews_7 == 1 | primarynews_6 == 1 | primarynews_4 == 1 | primarynews_5 == 1) & (primarynews_3 == 0 & primarynews_2 == 0 & primarynews_1 == 0) ~ "Online",
(primarynews_3 == 1 | primarynews_2 == 1 | primarynews_1 == 1) & (primarynews_5 == 0 & primarynews_4 == 0 & primarynews_6 == 0 & primarynews_7 == 0) ~ "Legacy",
TRUE ~ "Mixed"
))->on18
table(on18$Primary_media)
#### Political Knowledge ####
#Create one political knowledge variable using the variables on political knowledge.
# R gets 1 if they got each response right
# sum to 3 divide by 3 to get one variable indicating their knowledge
on18 %>%
select(unsg:nhse) %>%
glimpse()
#This prints the variable labels of each item to see what each measures
on18 %>%
select(unsg:nhse) %>%
var_label()
#this prints the value lablels to see what each value label contains
on18 %>%
select(unsg:nhse) %>%
val_labels()
#Interesting, in this one it looks like the survey team coded some
# close responses. A person who responds with Bill Morneau (even though wrong)
# Might know more than someone who just flat out doesn't know.
# For know let's keep it the way you have it. Responses are correct only if 1
#### Automatic way to recode several variables####
# I'm going to show you how to recode several variables the same way at the same time.
# Always start with the data frame
on18 %>%
#We are transforming variables so we use mutate
# We are going to be applying a function across several columns, so we use
# across()
#Importantly, we can use the same select() semantics inside across()
#in this case we can select the variables from unsg to nhse, including the ones in between
#We only know this really through poking and actually looking at the data columns. Even in SPSS if necessary.
mutate(
across(.cols=unsg:nhse,
#Now add in the function we are going to apply.
#Note that if_else is just a dplyr version of ifelse()
binaryrecode,
# A cool feature of across() is that you can add a suffix or a prefix
#This will paste the name of the column with _correct
#Exactly like you did above.
.names="{.col}_correct")
)->on18
# Always start with the data frame
on18 %>%
#We are transforming variables so we use mutate
# We are going to be applying a function across several columns, so we use
# across()
#Importantly, we can use the same select() semantics inside across()
#in this case we can select the variables from unsg to nhse, including the ones in between
#We only know this really through poking and actually looking at the data columns. Even in SPSS if necessary.
mutate(
across(.cols=unsg:nhse,
#Now add in the function we are going to apply.
#Note that if_else is just a dplyr version of ifelse()
binaryrecode(.),
# A cool feature of across() is that you can add a suffix or a prefix
#This will paste the name of the column with _correct
#Exactly like you did above.
.names="{.col}_correct")
)->on18
# Binary recode function
binaryrecode <-  function(x){
if_else(x==1, 1, 0)
}
# Always start with the data frame
on18 %>%
#We are transforming variables so we use mutate
# We are going to be applying a function across several columns, so we use
# across()
#Importantly, we can use the same select() semantics inside across()
#in this case we can select the variables from unsg to nhse, including the ones in between
#We only know this really through poking and actually looking at the data columns. Even in SPSS if necessary.
mutate(
across(.cols=unsg:nhse,
#Now add in the function we are going to apply.
#Note that if_else is just a dplyr version of ifelse()
binaryrecode,
# A cool feature of across() is that you can add a suffix or a prefix
#This will paste the name of the column with _correct
#Exactly like you did above.
.names="{.col}_correct")
)->on18
#Now you can quickly check that it worked
on18 %>%
select(ends_with("_correct"))
#This is great
on18$pol_knowledge <- (on18$unsg_correct + on18$financename_correct + on18$ggname_correct + on18$nhse_correct)/4
stopifnot((isTRUE(all.equal(on18$pol_knowledge,
((on18$unsg_correct + on18$financename_correct + on18$ggname_correct + on18$nhse_correct)/4)))))
# Add in a check
on18 %>%
ggplot(., aes(x=pol_knowledge))+geom_histogram()
on18 %>%
group_by(Primary_media) %>%
summarise(mean = mean(pol_knowledge, na.rm = T), sd = sd(pol_knowledge, na.rm = T))
mods_interact <- policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ Interest*Primary_Media))) %>%
mutate(tidied = map(lm_mod, tidy, conf.int = T))
modelsummary(mods_interact$lm_mod, stars=T)
mods_interact %>%
unnest(tidied) %>%
filter(term!="(Intercept)") %>%
ggplot(aes(x = estimate, y = term)) + geom_point() +
geom_linerange(aes(xmin=conf.low, xmax = conf.high), position = position_dodge(width=.75)) +
facet_wrap(~Policy_Issue, labeller = label_wrap_gen(width=30)) + geom_vline(xintercept = 0) + theme_bw()
#Now you can quickly check that it worked
on18 %>%
select(ends_with("_correct"))
#Add in a line that sources the first script 1_load_on18
source(c("Code/1_load_on18.R", "Code/0_functions.R"))
#Add in a line that sources the first script 1_load_on18
source("Code/1_load_on18.R", "Code/0_functions.R")
source("Code/0_functions.R")
source("~/Documents/Stats/Ontario_2018/Code/2a_separate_text_answers_wodclouds.R", echo=TRUE)
#Get qualitative answers
source('Code/1_load_on18.R')
source("~/Documents/Stats/Ontario_2018/Code/2a_separate_text_answers_wodclouds.R", echo=TRUE)
source("~/Documents/Stats/Ontario_2018/Code/2_news_bubbles.R", echo=TRUE)
?ggsave
ggsave("Plots/interaction_models.png", plot = interaction_models)
mods_interact %>%
unnest(tidied) %>%
filter(term!="(Intercept)") %>%
ggplot(aes(x = estimate, y = term)) + geom_point() +
geom_linerange(aes(xmin=conf.low, xmax = conf.high), position = position_dodge(width=.75)) +
facet_wrap(~Policy_Issue, labeller = label_wrap_gen(width=30)) + geom_vline(xintercept = 0) + theme_bw() -> interaction_models
ggsave("Plots/interaction_models.png", plot = interaction_models)
policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue)
#Add in a line that sources the first script 1_load_on18
source("Code/1_load_on18.R")
policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue)
policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ Primary_Media)))
policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ Primary_Media))) %>%
mutate(tidied = map(lm_mod, tidy, conf.int = T))
mods_media <- policies_social_use_sd_dis2_down %>%
group_by(Policy_Issue) %>%
summarise(lm_mod = list(lm(distance ~ Primary_Media))) %>%
mutate(tidied = map(lm_mod, tidy, conf.int = T))
devtools::install_github("benmarwick/wordcountaddin",  type = "source", dependencies = TRUE)
print(policies_sd_media)
print(policies_sd_media, ncol = 12
)
policies_media_down
print(policies_sd_media, n = 44)
print(policies_media_down, n = 44)
#Check the .
names(on18)
str(on18)
glimpse(on18)
glimpse(on18)
##Load needed scripts to complete analyses
source("Code/1_load_on18.R")
source("Code/0_functions.R")
#Check the variables in the dataset.
names(on18)
glimpse(on18)
nrow(on18)
